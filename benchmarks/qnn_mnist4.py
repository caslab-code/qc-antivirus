#initialization
import matplotlib.pyplot as plt
import numpy as np
import argparse

# importing Qiskit
from qiskit import IBMQ, Aer, assemble, transpile
from qiskit import QuantumCircuit, ClassicalRegister, QuantumRegister
from qiskit.providers.ibmq import least_busy

# import basic plot tools
from qiskit.visualization import plot_histogram

#importing from Search Pattern
import sys
sys.path.append('../antivirus/previous_antivirus')
import search_pattern

sys.path.append('../antivirus')
from pattern_matching import match, pattern_counter, bar_graph
from utils import get_bits_mapping

def malicious_circuit_gen(copies, mal_type): # copies- decides the depth of the malicious circuit and mal_type decides which malicious circuit
    
    if (mal_type == 'M10'):
        n = 4
    
    elif (mal_type == 'M9'):
        n = 3
    
    elif (mal_type == 'M5' or mal_type == 'M6' or mal_type == 'M7' or mal_type == 'M8'  ):
        n = 1     
    
    else:
        n = 2
    mal_circuit = QuantumCircuit(n)
    
############ MALICIOUS CIRCUIT #####################
    for i in range(copies):
        if (mal_type == 'M1'):
            mal_circuit.cx(0,1)
        
        if (mal_type == 'M2'):
            mal_circuit.cx(0,1)
            mal_circuit.delay(0, qarg=0, unit = 'dt')
        
        if (mal_type == 'M3'):
            mal_circuit.cx(0,1)
            mal_circuit.cx(1,0)
        
        if (mal_type == 'M4'):
            mal_circuit.cx(0,1)
            mal_circuit.h(0)
            mal_circuit.delay(0, qarg=0, unit = 'dt')
            mal_circuit.h(0)
        
        if (mal_type == 'M5'):
            mal_circuit.x(0)
            mal_circuit.delay(0, qarg=0, unit = 'dt')
        
        if (mal_type == 'M6'):
            mal_circuit.y(0)
            mal_circuit.delay(0, qarg=0, unit = 'dt')
        
        if (mal_type == 'M7'):
            mal_circuit.z(0)
            mal_circuit.delay(0, qarg=0, unit = 'dt')
        
        if (mal_type == 'M8'):
            mal_circuit.h(0)
            mal_circuit.delay(0, qarg=0, unit = 'dt')
        
        if (mal_type == 'M9'):
            mal_circuit.cx(0,1)
            mal_circuit.cx(1,2)
        
        if (mal_type == 'M10'):
            if i%2==1:
                mal_circuit.cx(1,0)
                mal_circuit.cx(2,1)
                mal_circuit.cx(3,2)
                mal_circuit.delay(0, qarg = 3)
            else:
                mal_circuit.cx(3,2)
                mal_circuit.cx(2,1)
                mal_circuit.cx(1,0)
                mal_circuit.delay(0, qarg = 0)
####################################################

#     mal_circuit.barrier()
    return mal_circuit

 
    
def qnn_mnist4_types(qnn_type):
    # n = 4
    qnn_circuit_short = """OPENQASM 2.0;
                            include "qelib1.inc";
                            qreg q[4];
                            ry(0.5) q[0];
                            ry(0.5) q[1];
                            ry(0.5) q[2];
                            ry(0.5) q[3];
                            rz(0.5) q[0];
                            rz(0.5) q[1];
                            rz(0.5) q[2];
                            rz(0.5) q[3];
                            rx(0.5) q[0];
                            rx(0.5) q[1];
                            rx(0.5) q[2];
                            rx(0.5) q[3];
                            ry(0.5) q[0];
                            ry(0.5) q[1];
                            ry(0.5) q[2];
                            ry(0.5) q[3];
                            u3(2.4018686,2.6075468,-0.73598874) q[0];
                            u3(2.8859026,-0.68833423,0.63394415) q[1];
                            u3(-1.5295002,1.8450029,2.7694488) q[2];
                            u3(-2.3047609,2.7306604,0.5879783) q[3];
                            cu3(2.3210366,0.4254677,1.5148387) q[0],q[1];
                            cu3(-0.44356465,2.4218092,0.46435541) q[1],q[2];
                            cu3(-1.4666209,0.80078667,-1.4474468) q[2],q[3];
                            cu3(-0.36842355,-1.275984,2.0840414) q[3],q[0];
                            u3(-2.4798796,-1.4483067,-0.88710642) q[0];
                            u3(-1.8889532,0.29651332,-3.1028855) q[1];
                            u3(2.8372009,-2.6686833,2.4253955) q[2];
                            u3(0.52282119,-1.0200894,1.9413471) q[3];
                            cu3(0.48961964,2.5382919,0.34343794) q[0],q[1];
                            cu3(-0.9907741,0.84409469,-0.85193533) q[1],q[2];
                            cu3(1.322163,2.8048835,1.8160276) q[2],q[3];
                            cu3(-1.3734181,1.8135304,0.56211334) q[3],q[0];
                            u3(1.5954108,-1.9148166,-3.1098893) q[0];
                            u3(-1.2137874,-2.4096735,2.5777991) q[1];
                            u3(0.90487719,1.3012903,0.99356383) q[2];
                            u3(-0.054651063,2.4586365,-2.2321444) q[3];
                            cu3(0.19780637,-2.1442633,0.96871638) q[0],q[1];
                            cu3(-1.0819089,0.96263516,-0.65452409) q[1],q[2];
                            cu3(2.6056113,-1.862028,-1.8736396) q[2],q[3];
                            cu3(-1.8737527,2.8256829,1.0469393) q[3],q[0];
                            u3(3.0229998,-2.5926819,-3.1160707) q[0];
                            u3(-2.4578683,-2.1133151,1.2724712) q[1];
                            u3(1.1249285,2.6104259,-1.6223981) q[2];
                            u3(-2.1416609,1.6668605,-1.2698458) q[3];
                            cu3(1.9067074,-0.74550194,1.7971354) q[0],q[1];
                            cu3(-2.440917,-1.585404,0.95779765) q[1],q[2];
                            cu3(0.66415638,-0.80097657,1.8726075) q[2],q[3];
                            cu3(2.1356838,-2.2781994,-1.6771964) q[3],q[0];
                        """
      
    qnn_circuit_medium = """OPENQASM 2.0;
                            include "qelib1.inc";
                            qreg q[4];
                            ry(0.5) q[0];
                            ry(0.5) q[1];
                            ry(0.5) q[2];
                            ry(0.5) q[3];
                            rz(0.5) q[0];
                            rz(0.5) q[1];
                            rz(0.5) q[2];
                            rz(0.5) q[3];
                            rx(0.5) q[0];
                            rx(0.5) q[1];
                            rx(0.5) q[2];
                            rx(0.5) q[3];
                            ry(0.5) q[0];
                            ry(0.5) q[1];
                            ry(0.5) q[2];
                            ry(0.5) q[3];
                            u3(2.4018686,2.6075468,-0.73598874) q[0];
                            u3(2.8859026,-0.68833423,0.63394415) q[1];
                            u3(-1.5295002,1.8450029,2.7694488) q[2];
                            u3(-2.3047609,2.7306604,0.5879783) q[3];
                            cu3(2.3210366,0.4254677,1.5148387) q[0],q[1];
                            cu3(-0.44356465,2.4218092,0.46435541) q[1],q[2];
                            cu3(-1.4666209,0.80078667,-1.4474468) q[2],q[3];
                            cu3(-0.36842355,-1.275984,2.0840414) q[3],q[0];
                            u3(-2.4798796,-1.4483067,-0.88710642) q[0];
                            u3(-1.8889532,0.29651332,-3.1028855) q[1];
                            u3(2.8372009,-2.6686833,2.4253955) q[2];
                            u3(0.52282119,-1.0200894,1.9413471) q[3];
                            cu3(0.48961964,2.5382919,0.34343794) q[0],q[1];
                            cu3(-0.9907741,0.84409469,-0.85193533) q[1],q[2];
                            cu3(1.322163,2.8048835,1.8160276) q[2],q[3];
                            cu3(-1.3734181,1.8135304,0.56211334) q[3],q[0];
                            u3(1.5954108,-1.9148166,-3.1098893) q[0];
                            u3(-1.2137874,-2.4096735,2.5777991) q[1];
                            u3(0.90487719,1.3012903,0.99356383) q[2];
                            u3(-0.054651063,2.4586365,-2.2321444) q[3];
                            cu3(0.19780637,-2.1442633,0.96871638) q[0],q[1];
                            cu3(-1.0819089,0.96263516,-0.65452409) q[1],q[2];
                            cu3(2.6056113,-1.862028,-1.8736396) q[2],q[3];
                            cu3(-1.8737527,2.8256829,1.0469393) q[3],q[0];
                            u3(3.0229998,-2.5926819,-3.1160707) q[0];
                            u3(-2.4578683,-2.1133151,1.2724712) q[1];
                            u3(1.1249285,2.6104259,-1.6223981) q[2];
                            u3(-2.1416609,1.6668605,-1.2698458) q[3];
                            cu3(1.9067074,-0.74550194,1.7971354) q[0],q[1];
                            cu3(-2.440917,-1.585404,0.95779765) q[1],q[2];
                            cu3(0.66415638,-0.80097657,1.8726075) q[2],q[3];
                            cu3(2.1356838,-2.2781994,-1.6771964) q[3],q[0];
                            u3(2.876637,-1.0600755,-1.1137462) q[0];
                            u3(-3.0397882,-1.7990966,0.7847814) q[1];
                            u3(-0.4146688,-2.2804382,0.073691376) q[2];
                            u3(-2.1459639,-2.6653168,-1.7299577) q[3];
                            cu3(-2.7495599,-2.0003717,3.1403639) q[0],q[1];
                            cu3(0.59336823,0.96811229,-2.9301143) q[1],q[2];
                            cu3(-2.0633159,-1.0456975,0.49125436) q[2],q[3];
                            cu3(-2.7643545,-1.3536276,-1.8807728) q[3],q[0];
                            u3(0.0087061655,-1.1689968,-0.21769907) q[0];
                            u3(-2.1288366,-2.156374,-1.8328109) q[1];
                            u3(-1.0753591,-2.4795992,2.6341307) q[2];
                            u3(-0.62349319,2.703016,0.97886401) q[3];
                            cu3(-2.6602912,2.1740928,-0.86439294) q[0],q[1];
                            cu3(-1.2042544,-2.6077435,-3.1232479) q[1],q[2];
                            cu3(0.89884311,-0.68626165,1.2230947) q[2],q[3];
                            cu3(-2.5781903,2.3324101,-2.306098) q[3],q[0];
                            u3(-0.54246932,0.65618354,1.6218529) q[0];
                            u3(2.5362403,2.8618629,-2.4910383) q[1];
                            u3(0.79063606,-1.3512806,-0.34427083) q[2];
                            u3(-2.3514512,2.8615468,-2.3057735) q[3];
                            cu3(1.6790282,1.1040801,1.0208793) q[0],q[1];
                            cu3(-1.6984901,2.8555555,0.69036627) q[1],q[2];
                            cu3(0.40413466,-2.7685437,1.3188044) q[2],q[3];
                            cu3(-0.47130361,-1.4392399,2.6984603) q[3],q[0];
                            u3(0.7004143,-1.7381692,-1.5900824) q[0];
                            u3(-0.15002902,1.7541438,-0.80278319) q[1];
                            u3(-1.7925138,-1.075816,-2.3470049) q[2];
                            u3(1.120394,2.4317191,-2.9576221) q[3];
                            cu3(0.72963709,1.622921,0.56966305) q[0],q[1];
                            cu3(-1.1187986,1.6397296,1.6509484) q[1],q[2];
                            cu3(1.1747271,-0.55204511,-0.83189774) q[2],q[3];
                            cu3(0.33609048,-0.55497521,-0.93619794) q[3],q[0];
                        """
                    
    qnn_circuit_long = """OPENQASM 2.0;
                        include "qelib1.inc";
                        qreg q[4];
                        ry(0.5) q[0];
                        ry(0.5) q[1];
                        ry(0.5) q[2];
                        ry(0.5) q[3];
                        rz(0.5) q[0];
                        rz(0.5) q[1];
                        rz(0.5) q[2];
                        rz(0.5) q[3];
                        rx(0.5) q[0];
                        rx(0.5) q[1];
                        rx(0.5) q[2];
                        rx(0.5) q[3];
                        ry(0.5) q[0];
                        ry(0.5) q[1];
                        ry(0.5) q[2];
                        ry(0.5) q[3];
                        u3(2.4018686,2.6075468,-0.73598874) q[0];
                        u3(2.8859026,-0.68833423,0.63394415) q[1];
                        u3(-1.5295002,1.8450029,2.7694488) q[2];
                        u3(-2.3047609,2.7306604,0.5879783) q[3];
                        cu3(2.3210366,0.4254677,1.5148387) q[0],q[1];
                        cu3(-0.44356465,2.4218092,0.46435541) q[1],q[2];
                        cu3(-1.4666209,0.80078667,-1.4474468) q[2],q[3];
                        cu3(-0.36842355,-1.275984,2.0840414) q[3],q[0];
                        u3(-2.4798796,-1.4483067,-0.88710642) q[0];
                        u3(-1.8889532,0.29651332,-3.1028855) q[1];
                        u3(2.8372009,-2.6686833,2.4253955) q[2];
                        u3(0.52282119,-1.0200894,1.9413471) q[3];
                        cu3(0.48961964,2.5382919,0.34343794) q[0],q[1];
                        cu3(-0.9907741,0.84409469,-0.85193533) q[1],q[2];
                        cu3(1.322163,2.8048835,1.8160276) q[2],q[3];
                        cu3(-1.3734181,1.8135304,0.56211334) q[3],q[0];
                        u3(1.5954108,-1.9148166,-3.1098893) q[0];
                        u3(-1.2137874,-2.4096735,2.5777991) q[1];
                        u3(0.90487719,1.3012903,0.99356383) q[2];
                        u3(-0.054651063,2.4586365,-2.2321444) q[3];
                        cu3(0.19780637,-2.1442633,0.96871638) q[0],q[1];
                        cu3(-1.0819089,0.96263516,-0.65452409) q[1],q[2];
                        cu3(2.6056113,-1.862028,-1.8736396) q[2],q[3];
                        cu3(-1.8737527,2.8256829,1.0469393) q[3],q[0];
                        u3(3.0229998,-2.5926819,-3.1160707) q[0];
                        u3(-2.4578683,-2.1133151,1.2724712) q[1];
                        u3(1.1249285,2.6104259,-1.6223981) q[2];
                        u3(-2.1416609,1.6668605,-1.2698458) q[3];
                        cu3(1.9067074,-0.74550194,1.7971354) q[0],q[1];
                        cu3(-2.440917,-1.585404,0.95779765) q[1],q[2];
                        cu3(0.66415638,-0.80097657,1.8726075) q[2],q[3];
                        cu3(2.1356838,-2.2781994,-1.6771964) q[3],q[0];
                        u3(2.876637,-1.0600755,-1.1137462) q[0];
                        u3(-3.0397882,-1.7990966,0.7847814) q[1];
                        u3(-0.4146688,-2.2804382,0.073691376) q[2];
                        u3(-2.1459639,-2.6653168,-1.7299577) q[3];
                        cu3(-2.7495599,-2.0003717,3.1403639) q[0],q[1];
                        cu3(0.59336823,0.96811229,-2.9301143) q[1],q[2];
                        cu3(-2.0633159,-1.0456975,0.49125436) q[2],q[3];
                        cu3(-2.7643545,-1.3536276,-1.8807728) q[3],q[0];
                        u3(0.0087061655,-1.1689968,-0.21769907) q[0];
                        u3(-2.1288366,-2.156374,-1.8328109) q[1];
                        u3(-1.0753591,-2.4795992,2.6341307) q[2];
                        u3(-0.62349319,2.703016,0.97886401) q[3];
                        cu3(-2.6602912,2.1740928,-0.86439294) q[0],q[1];
                        cu3(-1.2042544,-2.6077435,-3.1232479) q[1],q[2];
                        cu3(0.89884311,-0.68626165,1.2230947) q[2],q[3];
                        cu3(-2.5781903,2.3324101,-2.306098) q[3],q[0];
                        u3(-0.54246932,0.65618354,1.6218529) q[0];
                        u3(2.5362403,2.8618629,-2.4910383) q[1];
                        u3(0.79063606,-1.3512806,-0.34427083) q[2];
                        u3(-2.3514512,2.8615468,-2.3057735) q[3];
                        cu3(1.6790282,1.1040801,1.0208793) q[0],q[1];
                        cu3(-1.6984901,2.8555555,0.69036627) q[1],q[2];
                        cu3(0.40413466,-2.7685437,1.3188044) q[2],q[3];
                        cu3(-0.47130361,-1.4392399,2.6984603) q[3],q[0];
                        u3(0.7004143,-1.7381692,-1.5900824) q[0];
                        u3(-0.15002902,1.7541438,-0.80278319) q[1];
                        u3(-1.7925138,-1.075816,-2.3470049) q[2];
                        u3(1.120394,2.4317191,-2.9576221) q[3];
                        cu3(0.72963709,1.622921,0.56966305) q[0],q[1];
                        cu3(-1.1187986,1.6397296,1.6509484) q[1],q[2];
                        cu3(1.1747271,-0.55204511,-0.83189774) q[2],q[3];
                        cu3(0.33609048,-0.55497521,-0.93619794) q[3],q[0];
                        u3(2.0081277,2.6998835,-0.31100938) q[0];
                        u3(-0.70339274,0.045843031,-0.18757896) q[1];
                        u3(0.75527436,0.88037992,-2.8533728) q[2];
                        u3(-1.1593663,2.6456277,1.2238231) q[3];
                        cu3(-0.1562552,-1.8940843,-1.9220424) q[0],q[1];
                        cu3(-2.8141346,-1.0240412,1.0609291) q[1],q[2];
                        cu3(2.0031476,1.450465,-2.7769921) q[2],q[3];
                        cu3(-1.889236,-0.49579564,3.0390182) q[3],q[0];
                        u3(0.45445493,-0.81358057,1.2997248) q[0];
                        u3(-1.1965747,-2.0334136,2.2930086) q[1];
                        u3(-1.4284878,-0.62978488,-3.1252699) q[2];
                        u3(2.1025758,2.3801794,1.1449478) q[3];
                        cu3(-2.1905515,-3.1005633,-2.5515356) q[0],q[1];
                        cu3(2.3426864,1.5082967,2.6436644) q[1],q[2];
                        cu3(1.6457858,0.79511255,-0.03076463) q[2],q[3];
                        cu3(-2.3892002,-2.6916292,-2.9384844) q[3],q[0];
                        u3(1.2860485,-1.5424215,-0.63225365) q[0];
                        u3(-1.8080032,-0.57247221,-2.2111626) q[1];
                        u3(-2.0527658,1.0421003,-0.93367004) q[2];
                        u3(1.9394408,-1.0078505,-2.3045695) q[3];
                        cu3(-0.55429924,-1.5228789,-0.96114385) q[0],q[1];
                        cu3(-2.9907825,1.7576926,-2.1871912) q[1],q[2];
                        cu3(1.5790201,1.4256052,2.2444565) q[2],q[3];
                        cu3(-2.4097652,2.2594235,-1.485193) q[3],q[0];
                        u3(1.1657482,2.950316,-0.44306466) q[0];
                        u3(-0.024295395,-0.72329068,-2.6231813) q[1];
                        u3(1.5076593,-3.1187153,1.9503005) q[2];
                        u3(2.3506186,2.9710243,-0.74103743) q[3];
                        cu3(-2.5812643,0.70632517,1.7355015) q[0],q[1];
                        cu3(-3.1268547,-0.71309024,-1.883245) q[1],q[2];
                        cu3(-0.27477545,-1.5463343,-1.2841812) q[2],q[3];
                        cu3(-0.99732649,-2.9854681,2.5777004) q[3],q[0];
                       """
    
    if (qnn_type == "long"):
        qnn_circuit = qnn_circuit_long
    elif (qnn_type == "medium"):
        qnn_circuit = qnn_circuit_medium
    else:
        qnn_circuit = qnn_circuit_short
    
    
    qnn_circ = QuantumCircuit.from_qasm_str(qnn_circuit)
    
    return qnn_circ


def qnn_mnist4(qnn_type, mal_type ="M1", copies =1):
    qc = qnn_mnist4_types(qnn_type)
    pt = malicious_circuit_gen(copies,mal_type)
    print(qc)
    print(pt)


    print("--------------------------------------------------------------------------------------------------")
    print("\n1. Output details of all matching\n")
    for i, matching in enumerate(match(qc, pt)):
        print("Matching " + str(i+1) + ":\n")
        print("(a) Node mapping ({node in the quantum circuit: node in the pattern}):")
        print(matching)
        print("\n(b) Qubit and clbit index mapping:")
        mapping = get_bits_mapping(matching)
        print("Qubit index mapping is ({index in the quantum circuit: index in the pattern}): ")
        print(mapping[0])
        print("Clbit index mapping is ({index in the quantum circuit: index in the pattern}): ")
        print(mapping[1])
        print()
        print()
        print()

    
    return 

    
parser = argparse.ArgumentParser()
parser.add_argument('-q','--qnn_type', type=str, required=True, help='QNN MNIST 2 type options short, medium, long')
parser.add_argument('-m','--mal_type', type=str, required=True, help='Malicious Circuit type options M1 - M10')
parser.add_argument('-k','--copies', type=int, required=True, help='Defines depth of the malicious circuit')


args = parser.parse_args()
qnn_mnist4(args.qnn_type, args.mal_type, args.copies)

# grover_2qbit()    
